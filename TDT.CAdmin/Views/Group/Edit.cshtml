@model TDT.Core.DTO.GroupDTO

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="title-admin">Chỉnh sửa thông tin nhóm</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Id" class="control-label"></label>
                <input asp-for="Id" class="form-control" readonly />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" required oninput="validateName(this, 'name-message');" />
                <span asp-validation-for="Name" class="text-danger" id="name-message"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" oninput="validateDescription(this, 'description-message');" />
                <span asp-validation-for="Description" class="text-danger" id="description-message"></span>
            </div>
            <div class="form-group">
                <label asp-for="CreateDate" class="control-label"></label>
                <input asp-for="CreateDate" class="form-control" readonly />
                <span asp-validation-for="CreateDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" id="submit-create" value="Lưu" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Quay lại danh Sách Role</a>
</div>

<script>
    function validateName(input, messageSpanId) {
        const errorMessage = validateNoSpecialCharsYesVI(input) || validateMinLength(input, 4);
        const messageSpan = document.getElementById(messageSpanId);
        if (errorMessage) {
            messageSpan.textContent = errorMessage;
            return false; // Có lỗi
        } else {
            messageSpan.textContent = '';
            return true; // Không có lỗi
        }
    }

    function validateDescription(input, messageSpanId) {
        const errorMessage = validateMinLength(input, 10);
        const messageSpan = document.getElementById(messageSpanId);
        if (errorMessage) {
            messageSpan.textContent = errorMessage;
            return false; // Có lỗi
        } else {
            messageSpan.textContent = '';
            return true; // Không có lỗi
        }
    }
    document.getElementById("create-form").onsubmit = function () {
        const isNameValid = validateName(document.getElementById("Name"), 'name-message');
        const isDescriptionValid = validateDescription(document.getElementById("Description"), 'description-message');

        return isNameValid && isDescriptionValid;
    };

</script>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
